// ------------------------------------------------------------------------------------------------
//    ____                            _       _
//   / ___|___  _ __   __ _ _ __ __ _| |_ ___| |
// 	| |   / _ \| '_ \ / _` | '__/ _` | __/ __| |
//  | |__| (_) | | | | (_| | | | (_| | |_\__ \_|
//   \____\___/|_| |_|\__, |_|  \__,_|\__|___(_)
//                    |___/
//
//                                                你抵達了終點！
//
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// 還有許多東西可以學
//
// 這些遊樂場檔案中的範例是直接從蘋果電腦的 "Swift 程式語言" 中語言指南的部份擷取出來的
// 
// 這本書也包含了語言參考章節，它使用了更精簡的方式以及更深入的內容(包含文法)來探討這個語言。雖然沒有像閱讀美國國家標準
// 協會所制定的 C++ 語法標準那麼的清楚，但它仍然包含了許多細節。事實上，這些遊樂場中，有一部份的內容就是從語言參考章節
// 中擷取出來的
//
// 好消息是，如果你已設法搞懂所有遊樂場檔案中的內容，那麼或許你會發現從語言參考章節中，將這些你還不了解的(因為語言指南以
// 及遊樂場檔案沒有介紹)額外資訊搞懂其實挺快的
//
// 例如，你該如何撰寫一個斷言函式，藉由第一個參數的執行結果來確認錯誤狀態？
var pi = 3.14159
assert(pi > 3.14, "Pi is too small")

// 你知道為什麼下面這一行可以編譯嗎？
func doSomeMagic(#a: Int)(b: Int) -> Int
{
	return a + b
}

// ...或者是為什麼可以如此呼叫它呢？
doSomeMagic(a: 10)(b: 10)

// 你也可以學習元型別。以及你知道在 Swift 中，運算子的優先權跟 C 語言不太相同嗎？
//
// 顯然，這些東西是你在進一步深入前需要先搞清楚的
//
// 你會學到關於這些常數的訊息：
__FILE__ + "(" + String(__LINE__) + "): " + __FUNCTION__ + ":" + String(__COLUMN__)

// 此外，別讓任何人的程式碼將你搞糊塗了，尤其是當你看到像下面這種程式碼居然可以編譯的時候！
var ohrly = pi.dynamicType.infinity

// 最重要的事情是，你對這些遊樂場檔案中所展示的概念，將會有非常透徹的理解
//
// 祝寫碼愉快！
//
//
// - Paul Nettle
